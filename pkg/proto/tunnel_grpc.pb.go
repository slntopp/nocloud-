// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SocketConnectionClient is the client API for SocketConnection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SocketConnectionClient interface {
	InitConnection(ctx context.Context, opts ...grpc.CallOption) (SocketConnection_InitConnectionClient, error)
}

type socketConnectionClient struct {
	cc grpc.ClientConnInterface
}

func NewSocketConnectionClient(cc grpc.ClientConnInterface) SocketConnectionClient {
	return &socketConnectionClient{cc}
}

func (c *socketConnectionClient) InitConnection(ctx context.Context, opts ...grpc.CallOption) (SocketConnection_InitConnectionClient, error) {
	stream, err := c.cc.NewStream(ctx, &SocketConnection_ServiceDesc.Streams[0], "/tunnel.SocketConnection/InitConnection", opts...)
	if err != nil {
		return nil, err
	}
	x := &socketConnectionInitConnectionClient{stream}
	return x, nil
}

type SocketConnection_InitConnectionClient interface {
	Send(*HttpReSp4Loc) error
	Recv() (*HttpReQuest2Loc, error)
	grpc.ClientStream
}

type socketConnectionInitConnectionClient struct {
	grpc.ClientStream
}

func (x *socketConnectionInitConnectionClient) Send(m *HttpReSp4Loc) error {
	return x.ClientStream.SendMsg(m)
}

func (x *socketConnectionInitConnectionClient) Recv() (*HttpReQuest2Loc, error) {
	m := new(HttpReQuest2Loc)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SocketConnectionServer is the server API for SocketConnection service.
// All implementations must embed UnimplementedSocketConnectionServer
// for forward compatibility
type SocketConnectionServer interface {
	InitConnection(SocketConnection_InitConnectionServer) error
	mustEmbedUnimplementedSocketConnectionServer()
}

// UnimplementedSocketConnectionServer must be embedded to have forward compatible implementations.
type UnimplementedSocketConnectionServer struct {
}

func (UnimplementedSocketConnectionServer) InitConnection(SocketConnection_InitConnectionServer) error {
	return status.Errorf(codes.Unimplemented, "method InitConnection not implemented")
}
func (UnimplementedSocketConnectionServer) mustEmbedUnimplementedSocketConnectionServer() {}

// UnsafeSocketConnectionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocketConnectionServer will
// result in compilation errors.
type UnsafeSocketConnectionServer interface {
	mustEmbedUnimplementedSocketConnectionServer()
}

func RegisterSocketConnectionServer(s grpc.ServiceRegistrar, srv SocketConnectionServer) {
	s.RegisterService(&SocketConnection_ServiceDesc, srv)
}

func _SocketConnection_InitConnection_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SocketConnectionServer).InitConnection(&socketConnectionInitConnectionServer{stream})
}

type SocketConnection_InitConnectionServer interface {
	Send(*HttpReQuest2Loc) error
	Recv() (*HttpReSp4Loc, error)
	grpc.ServerStream
}

type socketConnectionInitConnectionServer struct {
	grpc.ServerStream
}

func (x *socketConnectionInitConnectionServer) Send(m *HttpReQuest2Loc) error {
	return x.ServerStream.SendMsg(m)
}

func (x *socketConnectionInitConnectionServer) Recv() (*HttpReSp4Loc, error) {
	m := new(HttpReSp4Loc)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SocketConnection_ServiceDesc is the grpc.ServiceDesc for SocketConnection service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SocketConnection_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tunnel.SocketConnection",
	HandlerType: (*SocketConnectionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InitConnection",
			Handler:       _SocketConnection_InitConnection_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/proto/tunnel.proto",
}
