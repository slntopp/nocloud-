// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: pkg/proto/tunnel.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SocketConnectionServiceClient is the client API for SocketConnectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SocketConnectionServiceClient interface {
	InitConnection(ctx context.Context, opts ...grpc.CallOption) (SocketConnectionService_InitConnectionClient, error)
	LogConnection(ctx context.Context, opts ...grpc.CallOption) (SocketConnectionService_LogConnectionClient, error)
}

type socketConnectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSocketConnectionServiceClient(cc grpc.ClientConnInterface) SocketConnectionServiceClient {
	return &socketConnectionServiceClient{cc}
}

func (c *socketConnectionServiceClient) InitConnection(ctx context.Context, opts ...grpc.CallOption) (SocketConnectionService_InitConnectionClient, error) {
	stream, err := c.cc.NewStream(ctx, &SocketConnectionService_ServiceDesc.Streams[0], "/tunnel.SocketConnectionService/InitConnection", opts...)
	if err != nil {
		return nil, err
	}
	x := &socketConnectionServiceInitConnectionClient{stream}
	return x, nil
}

type SocketConnectionService_InitConnectionClient interface {
	Send(*InitConnectionRequest) error
	Recv() (*InitConnectionResponse, error)
	grpc.ClientStream
}

type socketConnectionServiceInitConnectionClient struct {
	grpc.ClientStream
}

func (x *socketConnectionServiceInitConnectionClient) Send(m *InitConnectionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *socketConnectionServiceInitConnectionClient) Recv() (*InitConnectionResponse, error) {
	m := new(InitConnectionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *socketConnectionServiceClient) LogConnection(ctx context.Context, opts ...grpc.CallOption) (SocketConnectionService_LogConnectionClient, error) {
	stream, err := c.cc.NewStream(ctx, &SocketConnectionService_ServiceDesc.Streams[1], "/tunnel.SocketConnectionService/LogConnection", opts...)
	if err != nil {
		return nil, err
	}
	x := &socketConnectionServiceLogConnectionClient{stream}
	return x, nil
}

type SocketConnectionService_LogConnectionClient interface {
	Send(*LogConnectionRequest) error
	Recv() (*LogConnectionResponse, error)
	grpc.ClientStream
}

type socketConnectionServiceLogConnectionClient struct {
	grpc.ClientStream
}

func (x *socketConnectionServiceLogConnectionClient) Send(m *LogConnectionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *socketConnectionServiceLogConnectionClient) Recv() (*LogConnectionResponse, error) {
	m := new(LogConnectionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SocketConnectionServiceServer is the server API for SocketConnectionService service.
// All implementations must embed UnimplementedSocketConnectionServiceServer
// for forward compatibility
type SocketConnectionServiceServer interface {
	InitConnection(SocketConnectionService_InitConnectionServer) error
	LogConnection(SocketConnectionService_LogConnectionServer) error
	mustEmbedUnimplementedSocketConnectionServiceServer()
}

// UnimplementedSocketConnectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSocketConnectionServiceServer struct {
}

func (UnimplementedSocketConnectionServiceServer) InitConnection(SocketConnectionService_InitConnectionServer) error {
	return status.Errorf(codes.Unimplemented, "method InitConnection not implemented")
}
func (UnimplementedSocketConnectionServiceServer) LogConnection(SocketConnectionService_LogConnectionServer) error {
	return status.Errorf(codes.Unimplemented, "method LogConnection not implemented")
}
func (UnimplementedSocketConnectionServiceServer) mustEmbedUnimplementedSocketConnectionServiceServer() {
}

// UnsafeSocketConnectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocketConnectionServiceServer will
// result in compilation errors.
type UnsafeSocketConnectionServiceServer interface {
	mustEmbedUnimplementedSocketConnectionServiceServer()
}

func RegisterSocketConnectionServiceServer(s grpc.ServiceRegistrar, srv SocketConnectionServiceServer) {
	s.RegisterService(&SocketConnectionService_ServiceDesc, srv)
}

func _SocketConnectionService_InitConnection_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SocketConnectionServiceServer).InitConnection(&socketConnectionServiceInitConnectionServer{stream})
}

type SocketConnectionService_InitConnectionServer interface {
	Send(*InitConnectionResponse) error
	Recv() (*InitConnectionRequest, error)
	grpc.ServerStream
}

type socketConnectionServiceInitConnectionServer struct {
	grpc.ServerStream
}

func (x *socketConnectionServiceInitConnectionServer) Send(m *InitConnectionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *socketConnectionServiceInitConnectionServer) Recv() (*InitConnectionRequest, error) {
	m := new(InitConnectionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SocketConnectionService_LogConnection_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SocketConnectionServiceServer).LogConnection(&socketConnectionServiceLogConnectionServer{stream})
}

type SocketConnectionService_LogConnectionServer interface {
	Send(*LogConnectionResponse) error
	Recv() (*LogConnectionRequest, error)
	grpc.ServerStream
}

type socketConnectionServiceLogConnectionServer struct {
	grpc.ServerStream
}

func (x *socketConnectionServiceLogConnectionServer) Send(m *LogConnectionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *socketConnectionServiceLogConnectionServer) Recv() (*LogConnectionRequest, error) {
	m := new(LogConnectionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SocketConnectionService_ServiceDesc is the grpc.ServiceDesc for SocketConnectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SocketConnectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tunnel.SocketConnectionService",
	HandlerType: (*SocketConnectionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InitConnection",
			Handler:       _SocketConnectionService_InitConnection_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "LogConnection",
			Handler:       _SocketConnectionService_LogConnection_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/proto/tunnel.proto",
}

// LogServiceClient is the client API for LogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogServiceClient interface {
	Log(ctx context.Context, opts ...grpc.CallOption) (LogService_LogClient, error)
}

type logServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogServiceClient(cc grpc.ClientConnInterface) LogServiceClient {
	return &logServiceClient{cc}
}

func (c *logServiceClient) Log(ctx context.Context, opts ...grpc.CallOption) (LogService_LogClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogService_ServiceDesc.Streams[0], "/tunnel.LogService/Log", opts...)
	if err != nil {
		return nil, err
	}
	x := &logServiceLogClient{stream}
	return x, nil
}

type LogService_LogClient interface {
	Send(*LogRequest) error
	Recv() (*LogResponse, error)
	grpc.ClientStream
}

type logServiceLogClient struct {
	grpc.ClientStream
}

func (x *logServiceLogClient) Send(m *LogRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logServiceLogClient) Recv() (*LogResponse, error) {
	m := new(LogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogServiceServer is the server API for LogService service.
// All implementations must embed UnimplementedLogServiceServer
// for forward compatibility
type LogServiceServer interface {
	Log(LogService_LogServer) error
	mustEmbedUnimplementedLogServiceServer()
}

// UnimplementedLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogServiceServer struct {
}

func (UnimplementedLogServiceServer) Log(LogService_LogServer) error {
	return status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (UnimplementedLogServiceServer) mustEmbedUnimplementedLogServiceServer() {}

// UnsafeLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogServiceServer will
// result in compilation errors.
type UnsafeLogServiceServer interface {
	mustEmbedUnimplementedLogServiceServer()
}

func RegisterLogServiceServer(s grpc.ServiceRegistrar, srv LogServiceServer) {
	s.RegisterService(&LogService_ServiceDesc, srv)
}

func _LogService_Log_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogServiceServer).Log(&logServiceLogServer{stream})
}

type LogService_LogServer interface {
	Send(*LogResponse) error
	Recv() (*LogRequest, error)
	grpc.ServerStream
}

type logServiceLogServer struct {
	grpc.ServerStream
}

func (x *logServiceLogServer) Send(m *LogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logServiceLogServer) Recv() (*LogRequest, error) {
	m := new(LogRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogService_ServiceDesc is the grpc.ServiceDesc for LogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tunnel.LogService",
	HandlerType: (*LogServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Log",
			Handler:       _LogService_Log_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/proto/tunnel.proto",
}
